rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && request.auth.token.admin == true; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }

    // Credits: per-user balance
    match /credits/{uid} {
      allow read: if isOwner(uid) || isAdmin();
      allow create, update: if isOwner(uid) || isAdmin();
      allow delete: if isOwner(uid) || isAdmin(); // Allow users to delete their own credits

      // Enforce numeric seconds and prevent negative values
      allow write: if (isOwner(uid) || isAdmin()) &&
        request.resource.data.seconds is int &&
        request.resource.data.seconds >= 0;
    }

    // Purchases: metadata only (no receipts)
    match /purchases/{uid} {
      // Allow user to delete the main purchases document
      allow delete: if isOwner(uid) || isAdmin();
      allow read, create, update: if isOwner(uid) || isAdmin();
    }
    
    match /purchases/{uid}/items/{purchaseId} {
      allow read: if isOwner(uid) || isAdmin();
      // Owner can create and delete their own metadata (for privacy deletion). No updates.
      allow create: if isOwner(uid);
      allow update: if false; // immutable
      allow delete: if isOwner(uid);
    }

    // Usage sessions: metadata only, no conversation content
    match /usageSessions/{sessionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      // Allow owner to delete their own session metadata (privacy deletion)
      allow delete: if isOwner(resource.data.userId);
      allow update: if false;
    }

    // Starter device registry: blocks multiple UIDs on same device
    match /starterDevices/{deviceHash} {
      // Only the signed-in client can claim its own device hash once
      allow read: if isAdmin();
      allow create: if isSignedIn() && !exists(/databases/$(database)/documents/starterDevices/$(deviceHash));
      allow update, delete: if false;
    }

    // Users: aggregate stats; readable by owner, writable by app
    match /users/{uid} {
      allow read: if isOwner(uid) || isAdmin();
      allow create, update: if isOwner(uid) || isAdmin();
      allow delete: if isOwner(uid) || isAdmin(); // Allow users to delete their own profile
    }

    // Allow admins to read collection groups for revenue analytics
    match /{path=**}/items/{item} {
      allow read: if isAdmin();
    }

    // Deny all else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}